@page "/products/create"

@*injeção de dependencia no blazor*@
@inject AppDbContext _context 
@inject NavigationManager _navigationManager


<h1>Create Product</h1>

<EditForm Model="_model" OnValidSubmit="@HandleFormSubmitAsync">
    
    @*mostrando erros de validações na tela*@
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="Title" class="form-label">Title</label>
        <InputText class="form-control" type="text" id="Title" @bind-Value="_model.Title" />
    </div>

    <div class="mb-3">
        <label for="Price" class="form-label">Price</label>
        <InputNumber class="form-control" type="number" id="Price" @bind-Value="_model.Price" />
    </div>

    <div class="mb-3">
        <label for="CategoryId" class="form-label">Category</label>
        <InputSelect id="categoryId" @bind-Value="_model.CategoryId" class="form-control">
            @foreach (var category in _categories)
            {
                <option value="@category.Id">@category.Title</option>
            }
        </InputSelect>
    </div>

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div class="alert alert-danger" role="alert">@_errorMessage</div>
    }

    <button class="btn btn-success" type="submit">Submit</button>
</EditForm>

@code {
    private Product _model = new();

    string? _errorMessage = null;

    List<Category> _categories = new();

    protected override async Task OnInitializedAsync()
    {
        _categories = await _context.Categories.AsNoTracking().ToListAsync();

        //selecionando o primeiro item já para o campo input
        _model.CategoryId = _categories[0].Id >= 0 ? _categories[0].Id : 0;
    }

    async Task HandleFormSubmitAsync()
    {
        try
        {
            await _context.Products.AddAsync(_model);
            await _context.SaveChangesAsync();
            _navigationManager.NavigateTo("/products");
        } catch
        {
            _errorMessage = "Falha ao gravar os dados. Tente novamente.";

        }
    }
}